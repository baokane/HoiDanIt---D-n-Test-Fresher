import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { message } from 'antd';

// const carts = [
//     { quantity: 1(có thể thay đổi), _id: 'abc', details: { _id: '123', name: 'tên sản phẩm 1', quantity:  1000 (ban đầu ko thay đổi) } },
//     { quantity: 2, _id: 'xyz', details: { _id: '456', name: 'tên sản phẩm 2', quantity:  100 } },
// ]

const initialState = {
    carts: []
};

export const orderSlide = createSlice({
    name: 'account',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        doAddBookAction: (state, action) => {
            console.log('state:', state.carts, 'action:', action.payload)
            let carts = state.carts;
            let item = action.payload;

            let isExistIndex = carts.findIndex(c => c._id === item._id)
            if (isExistIndex > -1) {
                carts[isExistIndex].quantity = carts[isExistIndex].quantity + item.quantity
                // if (carts[isExistIndex].quantity > carts[isExistIndex].details.quantity) {
                //     carts[isExistIndex].quantity = carts[isExistIndex].details.quantity
                // }
            } else {
                carts.push({
                    quantity: item.quantity,
                    _id: item._id,
                    details: item.details
                })
            }
            // Update Redux
            state.carts = carts
            message.success('Thêm sách vào giỏ hàng thành công')
        },
        doUpdateBookAction: (state, action) => {
            let carts = state.carts;
            let item = action.payload;
            console.log('carts:', state.carts, 'item:', action.payload)

            let isExistIndex = carts.findIndex(c => c._id === item._id)
            if (isExistIndex > -1) {
                carts[isExistIndex].quantity = item.quantity
                // if (carts[isExistIndex].quantity > carts[isExistIndex].details.quantity) {
                //     carts[isExistIndex].quantity = carts[isExistIndex].details.quantity
                // }
            } else {
                carts.push({
                    quantity: item.quantity,
                    _id: item._id,
                    details: item.details
                })
            }
            // Update Redux
            state.carts = carts
        },

        doDeleteBookAction: (state, action) => {
            console.log('state:', state.carts, 'action:', action.payload)
            let carts = state.carts;
            let item = action.payload;
            carts = state.carts.filter(d => d._id !== item._id)
            // Update Redux
            state.carts = carts
        },
        doResetCartsAction: (state, action) => {
            console.log('state:', state.carts, 'action:', action.payload)
            // Update Redux
            state.carts = []
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        // builder
        //     .addCase(incrementAsync.pending, (state) => {
        //         state.status = 'loading';
        //     })
        //     .addCase(incrementAsync.fulfilled, (state, action) => {
        //         state.status = 'idle';
        //         state.value += action.payload;
        //     });
    },
});

export const { doAddBookAction, doUpdateBookAction, doDeleteBookAction, doResetCartsAction } = orderSlide.actions;

export default orderSlide.reducer;
