import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { message } from 'antd';

// const carts = [
//     { quantity: 1, _id: 'abc', details: { _id: '123', name: 'tên sản phẩm 1' } },
//     { quantity: 2, _id: 'xyz', details: { _id: '456', name: 'tên sản phẩm 2' } },
// ]

const initialState = {
    carts: []
};

export const orderSlide = createSlice({
    name: 'account',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        doAddBookAction: (state, action) => {
            console.log('state:', state.carts, 'action:', action.payload)
            let carts = state.carts;
            let item = action.payload;

            let isExistIndex = carts.findIndex(c => c._id === item._id)
            if (isExistIndex > -1) {
                carts[isExistIndex].quantity = carts[isExistIndex].quantity + item.quantity
                // if (carts[isExistIndex].quantity > carts[isExistIndex].details.quantity) {
                //     carts[isExistIndex].quantity = carts[isExistIndex].details.quantity
                // }
            } else {
                carts.push({
                    quantity: item.quantity,
                    _id: item._id,
                    details: {
                        _id: item._id,
                        author: item?.details?.author,
                        category: item?.details?.category,
                        name: item?.details?.mainText,
                        price: item?.details?.price,
                        quantity: item.quantity,
                        sold: item?.details?.sold,
                        thumbnail: item?.details?.thumbnail,
                        items: item?.details?.items,
                        slider: item?.details?.slider
                    }
                })
            }
            // Update Redux
            state.carts = carts
            message.success('Thêm sách vào giỏ hàng thành công')
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            // state.isAuthenticated = true;
            // state.isLoading = false;
            // state.user = action.payload;
        },
        // doGetAccountAction: (state, action) => {
        //     // Redux Toolkit allows us to write "mutating" logic in reducers. It
        //     // doesn't actually mutate the state because it uses the Immer library,
        //     // which detects changes to a "draft state" and produces a brand new
        //     // immutable state based off those changes
        //     state.isAuthenticated = true;
        //     state.isLoading = false;
        //     state.user = action.payload.user
        // },
        // doLogoutAction: (state, action) => {
        //     // Redux Toolkit allows us to write "mutating" logic in reducers. It
        //     // doesn't actually mutate the state because it uses the Immer library,
        //     // which detects changes to a "draft state" and produces a brand new
        //     // immutable state based off those changes
        //     state.isAuthenticated = false;
        //     // state.isLoading = false;
        //     localStorage.removeItem('access_token')
        //     // state.user = action.payload.user
        //     state.user = {
        //         email: '',
        //         phone: '',
        //         fullname: '',
        //         role: '',
        //         avatar: '',
        //         id: '',
        //     }
        // },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        // builder
        //     .addCase(incrementAsync.pending, (state) => {
        //         state.status = 'loading';
        //     })
        //     .addCase(incrementAsync.fulfilled, (state, action) => {
        //         state.status = 'idle';
        //         state.value += action.payload;
        //     });
    },
});

export const { doLoginAction, doGetAccountAction, doLogoutAction, doAddBookAction } = orderSlide.actions;

export default orderSlide.reducer;
